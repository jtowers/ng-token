!function(){!function(){var e=angular.module("ngToken.Interceptor",["ngToken.User"]);e.factory("ngToken.Intercept",["$rootScope","$q","$window","$tokenUser",function(e,t,o,n){var r={};return r.request=function(e){return e.headers=e.headers||{},n.getToken()&&(e.headers.Authorization="Bearer "+n.getToken()),e},r.responseError=function(o){return 401===o.status&&e.$broadcast("$tokenNotAuthenticated",o),403===o.status&&e.$broadcast("$tokenNotAuthorized",o),t.reject(o)},r}]),e.config(["$httpProvider",function(e){e.interceptors.push("ngToken.Intercept")}])}(),function(){var e=angular.module("ngToken.Provider",["ngToken.User"]);e.provider("$token",function(){this.defaults={endpoints:{login:"/login",keepAlive:"/token/keepAlive",logout:"/logout"},tokenStorage:"localStorage"},this.newToken=function(e){if(!e)throw new Error("new token endpoint must exist");this.defaults.endpoints.login=e},this.keepAlive=function(e){if(!e)throw new Error("keepalive endpoint must exist");this.defaults.endpoints.keepAlive=e},this.logout=function(e){if(!e)throw new Error("logout endpoint must exist");this.defaults.endpoints.logout=e},this.tokenStorage=function(e){if("localStorage"!==e&&"sessionStorage"!==e)throw new Error('storage must be "localStorage" or "sessionStorage"');this.defaults.tokenStorage=e},this.$get=["$rootScope","$window","$http","$tokenUser",function(e,t,o,n){var r=this;return this.srv={},this.srv.$storage=t[this.defaults.tokenStorage],this.srv.getCachedToken=function(){return n.getToken()},this.srv.setToken=function(e){n.setToken(e)},this.srv.sessionExpired=function(){n.removeToken()},this.srv.logout=function(){o.post(r.defaults.endpoints.logout).success(function(t){r.srv.sessionExpired(),e.$broadcast("$tokenLogoutSuccess",t)}).error(function(t){e.$broadcast("$tokenLogoutFail",t)})},this.srv.login=function(t){o.post(r.defaults.endpoints.login,t).success(function(t){r.srv.setToken(t.token),e.$broadcast("$tokenAuthSuccess",t)}).error(function(t){e.$broadcast("$tokenAuthFail",t)})},this.srv.keepAlive=function(){o.post(r.defaults.endpoints.keepAlive).success(function(t){n.setToken(t.token),e.$broadcast("$tokenKeepAlive",t)}).error(function(t){e.$broadcast("$tokenKeepAliveFail",t)})},this.srv}]})}(),function(){var e=angular.module("ngToken.TimeoutManager",["ngToken.Provider","ngIdle"]);e.factory("$tokenTimeout",["$idle","$token","$window","$rootScope","$document",function(e,t,o,n,r){var s={};return s.lastActivity=new Date,s.checkIdle=function(e){t.getCachedToken()&&(Date.parse(t.$storage.lastTouch)<=this.lastActivity?n.$broadcast("$tokenWarn",e):this.resetIdle())},s.resetIdle=function(){e.unwatch(),e.watch(),n.$broadcast("$tokenResetIdle")},s.watch=function(){var o=this;e.watch(),n.$on("startIdle",o.resetIdle()),r.on(e._options().events,function(){var e=new Date;t.$storage.lastTouch=e,o.lastActivity=e}),n.$on("$idleWarn",function(e,t){o.checkIdle(t)}),n.$on("$idleTimeout",function(){t.sessionExpired(),o.resetIdle(),n.$broadcast("$tokenExpired")}),n.$on("$keepalive",function(){t.keepAlive()})},s}])}(),function(){"use strict";var e=angular.module("ngToken.User",[]);e.factory("$tokenUser",["$window","$rootScope",function(e){var t={};return t.$storage=e.localStorage,t.setStorage=function(t){this.$storage=e[t]},t.getStorage=function(){return this.$storage},t.getToken=function(){return this.$storage.userToken},t.setToken=function(e){return this.$storage.userToken=e,e},t.removeToken=function(){return delete this.$storage.userToken},t}])}(),angular.module("ngToken",["ngToken.Provider","ngToken.Interceptor","ngToken.TimeoutManager"])}();